[{"content":" Demo Repository Introduzione Febbraio 2023 un mese in un anno di abbondanza sia nel mondo reale che nel mondo digitale, un anno che è appena iniziato. Notizie spaventose continuano a colpire tutti noi, dalla guerra in Ucraina al terremoto in Turchia e Siria, in un periodo in cui l\u0026rsquo;umanità stava ancora riprendendosi dal virus epidemico COVID-19. Un età di alta connessione tra individui in cui i pensieri non sono mai stati condivisi con tata volontà è facilità attraverso Internet.\nNel corso del tempo la crescita in numero di linguaggi di programmazione e di framework hanno portato gli sviluppatori alla pazzia. Sulle piattaforme social come Twitter e Reddit si tengono continuamente dibattiti apparentemente critici e costruttivi. Basterà solo continuare a scorrere diverse pagine più in fondo che si potranno notare le vere motivazioni. Le parole diventano più dure, le frasi più crudeli e i paragrafi più lunghi. È qui che i dibattiti si trasformano in battaglie e ogni parte suffraga il proprio punto di vista per un unico fine, annichilare l\u0026rsquo;opposizione. Queste battaglie sono definite battaglia-dei-linguaggi o battaglia-dei-framework.\nAnche io combatto le mie battaglie, e ho portato per voi un semplice progetto per divulgare un paradigma di programmazione controverso e impopolare. Mi riferisco alla programmazione funzionale il cui simbolo è il lambda (ƛ) e il linguaggio più moderno è Clojure.\nQuali strumenti utilizzeremo? Uno dei linguaggi più utilizzati per la programmazione web è senza dubbio JavaScript e gli accoliti HTML e CSS.\nPoco tempo fa è nato Clojure un nuovo linguaggio, un dialetto del appezzato e altrettanto odiato LISP. Esso ne ha ereditato l\u0026rsquo;eleganza e le funzionalità, il tutto adattato con comodità aggiuntive alle esigenze moderne. Un linguaggio ospite della JVM dove anche qui ne ha ereditato i pregi e i difetti.\nCon l\u0026rsquo;aumento in popolarità di JavaScript si è sviluppato attorno una community numerosa che ha contribuito a espandere gli strumenti ben oltre le richieste. Cosi Clojure sarebbe andato in ricerca di una nuova piattaforma simbionte. Grazie al ricco ecosistema di JavaScript combinato alle ottimizzazioni fornite dal compilatore Google Closure è nato uno dei linguaggi più potenti che il web abbia mai visto: ClojureScript.\nSenza l\u0026rsquo;HTML non esisterebbe il web come lo conosciamo oggi, un linguaggio di markup con la sintassi XML. Purtroppo questa sintassi non a tutti piacque, e cosi sarebbe nata una nuova libreria per ClojureScript di nome Hiccup con l\u0026rsquo;obiettivo di tradurre la sintassi XML in una più adatta per i sviluppatori in Clojure. E se in HTML scriviamo \u0026lt;div\u0026gt;...\u0026lt;/div\u0026gt;, visivamente inappagate; nonostante lo sforzo degli editor a venire in soccorso, con Hiccup scriveremo [:div \u0026quot;...\u0026quot;], un modo più chiaro e semplice, un modo alla Clojure… Già… Possiamo distinguere una porzione della sintassi di Clojure: [] che di solito rappresenta un contenitore, :div una keyword, e \u0026quot;\u0026quot; una stringa.\nGli utenti quando surfano il web si aspettano un certo piacere visivo che può essere soddisfatto con un l\u0026rsquo;aggiunta del CSS. Però sono tempi moderni e sono rimasti in pochi gli sviluppatori puristi che programmano in vanilla. E come biasimare la maggioranza, i framework assistono lo sviluppatore a produrre a una velocità singolare. Per questo ho scelto di usare TailwindCSS che porta classi già implementate che vengono utilizzate direttamente nel codice HTML. In più utilizzeremo anche DaisyUI, una libreria di componenti.\nUn altro framework che utilizzeremo in questo progetto è Reagent un interfaccia in Clojure per React. E queste è tutto ciò che c\u0026rsquo;è da dire sulla sua esistenza.\nshadow-cljs, che ci approvvigiona con tutti gli utili per compilare il codice ClojureScript.\nNPM, uno strumento da linea di comando che useremo per installare i pacchetti su cui dipenderà il nostro progetto.\nQuesti strumenti sono nuovi e carini, ma non eccitatevi troppo, ancora avrete da vedere l\u0026rsquo;attrazione principale, la sintassi all\u0026rsquo;hamburger di LISP.\nPrima d\u0026rsquo;inziare installa i requisiti Lista breve dei requisiti.\nJava\nClojure\nnodejs\nDurante questo articolo utilizziamo la shell di Linux.\nPer installare i pacchetti su MacOS usa brew. Per Windows esiste un modo attraverso VSCode per avere la shell, più informazioni qui. Quando installi i programmi attraverso il package manager i comandi potrebbero variare in base alla distribuzione, la mia è Debian. È per questo che è meglio andare sul sito del programma e installarlo secondo le istruzioni ufficiali.\nInstalla Java, la versione open source: openjdk.\n1 2 3 sudo apt update sudo apt install default-jre default-jdk java --version Prima d\u0026rsquo;installare Clojure, assicurati prima che le dipendenze bash, curl, rlwrap siano installate.\n1 which bash curl rlwrap /bin/bash\n/usr/bin/curl\n/usr/local/bin/rlwrap\nAltrimenti installli.\n1 sudo apt install curl rlwrap Installa Clojure.\n1 2 3 curl -O https://download.clojure.org/install/posix-install-1.11.1.1224.sh chmod +x posix-install-1.11.1.1224.sh sudo ./posix-install-1.11.1.1224.sh Installa NodeJS.\n1 sudo apt install nodejs Ti consiglio d\u0026rsquo;installare VSCode, ma utilizza il binario senza telemetria di VSCodium.\nInizializzare il progetto Inizializziamo il progetto per avere un ambiente di sviluppo adeguato.\nInstalla e configura l\u0026rsquo;aiutante di Clojure per VSCode: Calva, oppure guarda questa lista, potresti trovare un aiutante per il tuo editor preferito.\nInizializza lo scheletro del progetto con shadow-cljs.\n1 2 npx create-cljs-project ~/Desktop/responsive-landing-page-in-clojurescript cd ~/Desktop/responsive-landing-page-in-clojurescript Aggiungi gli script NPM In package.json.\n1 2 3 4 5 6 7 8 9 10 11 12 { \u0026#34;scripts\u0026#34;: { \u0026#34;release\u0026#34;: \u0026#34;run-s css:release init:release cljs:release\u0026#34;, \u0026#34;watch\u0026#34;: \u0026#34;run-p css:watch init:watch cljs:watch\u0026#34;, \u0026#34;init:release\u0026#34;: \u0026#34;mkdir -p target/dist \u0026amp;\u0026amp; cp -r resources/{assets,index.html} target/dist\u0026#34;, \u0026#34;init:watch\u0026#34;: \u0026#34;mkdir -p target/build \u0026amp;\u0026amp; cp -r resources/{assets,index.html} target/build\u0026#34;, \u0026#34;css:release\u0026#34;: \u0026#34;postcss resources/css/tailwind.css --output target/dist/css/main.css --verbose\u0026#34;, \u0026#34;css:watch\u0026#34;: \u0026#34;postcss resources/css/tailwind.css --output target/build/css/main.css --watch --verbose\u0026#34;, \u0026#34;cljs:release\u0026#34;: \u0026#34;clojure -M:cljs release app\u0026#34;, \u0026#34;cljs:watch\u0026#34;: \u0026#34;clojure -M:cljs watch app\u0026#34; } } Useremo questi script durante lo sviluppo. Installa le dipendenze 1 npm install react react-dom shadow-cljs tailwindcss daisyui postcss postcss-cli autoprefixer npm-run-all --save Configura TailwindCSS In tailwind.config.js.\n1 2 3 4 5 6 7 8 9 10 11 module.exports = { content: [\u0026#34;./target/**/*.{html,js}\u0026#34;], Theme: { extend: { fontFamily: { sans: [\u0026#39;Roboto\u0026#39;, \u0026#39;sans-serif\u0026#39;], }, }, }, plugins: [require(\u0026#39;daisyui\u0026#39;)], } Riga 5, aggiunto il font Roboto. Riga 10, aggiunto il plugin DaisyUI. In resources/css/tailwind.css.\n1 2 3 @tailwind base; @tailwind components; @tailwind utilities; Aggiunte le classi richieste da TailwindCSS che PostCSS risolverà durante la compilazione attraverso un script che abbiamo definito in package.json. Configura PostCSS In postcss.config.js.\n1 2 3 4 5 6 module.exports = { plugins: { tailwindcss: {}, autoprefixer: {}, } } Aggiungi le pagine principali In resources/index.html.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;!doctype html\u0026gt; \u0026lt;html class=\u0026#34;scroll-smooth\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/svg+xml\u0026#34; href=\u0026#34;assets/images/1F49F.svg\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/main.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Responsive landing page in ClojureScript\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;js/main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; In src/main/landing_page/app.cljs.\n1 2 3 4 5 6 7 8 9 10 11 12 (ns landing-page.app (:require [reagent.dom :as rd])) (defn app [] [:div [:h1 \u0026#34;Hello \u0026#34; [:span {:class \u0026#34;underline decoration-emerald-500\u0026#34;} \u0026#34;World\u0026#34;] \u0026#34;!\u0026#34;]]) (defn start [] (rd/render [app] (.getElementById js/document \u0026#34;app\u0026#34;))) (defn main [] (start)) Riga 2, aggiunta la libreria reagent.dom. Riga 4, definita la funzione app che conterrà più avanti tutti i componenti della pagina web. Riga 7, definita la funzione start che monta i componenti nella DOM attraverso rd/render che accetta due argomenti. Il primo è [app], la chiamata alla funzione app nella sintassi di Reagent. Può essere anche chiamata nella sintassi di Clojure (rd/render (app) ...), però per motivi di efficienza si usa la sintassi di reagent (rd/render [app] ...). Più informazioni nella documentazione ufficiale. Il secondo è (.getElementById js/document \u0026quot;app\u0026quot;) che prende l\u0026rsquo;id app nel file index.html. Riga 11, definita la funzione main che è chiamata da shadow-cljs per eseguire l\u0026rsquo;ambiente di sviluppo. Fai partire la modalità sviluppo 1 npm run watch Vai all\u0026rsquo;indirizzo http://localhost:8080 e verifica che venga visualizzata la scritta Hello World!.\nSviluppa il sito Ora che il progetto contiene tutte le parti necessarie strutturiamo la pagina in componenti.\nHero Contiene un titolo, una descrizione e un pulsante per scorrere più in basso. È la prima cosa che l\u0026rsquo;utente vedrà quando si collegherà al sito e dovrà occupare tutto lo spazio della pagina.\nTerminal Contiene la schermata di un terminale con una breve descrizione su come scaricare questo progetto.\nFooter Compone la parte finale della pagina. Verranno visualizzati il logo, i social e la licenza.\nNotice Contiene una notifica pop-up che informerà l\u0026rsquo;utente sui cookies utilizzati dal sito. Potrà essere chiusa attraverso un pulsante.\nApp app.cljs, è il file dove tutti i componenti vengono chiamati.\nCrea il componente hero In src/main/landing_page/components/hero.cljs.\n1 2 3 4 5 6 7 8 9 10 (ns landing-page.components.hero) (defn main [] [:div {:class \u0026#34;hero min-h-screen bg-base-200\u0026#34;} [:div {:class \u0026#34;hero-content text-center\u0026#34;} [:div {:class \u0026#34;max-w-md\u0026#34;} [:h1 {:class \u0026#34;text-5xl font-bold\u0026#34;} \u0026#34;❤️ ClojureScript\u0026#34;] [:p {:class \u0026#34;py-6\u0026#34;} \u0026#34;Build a responsive landing page in ClojureScript, Reagent and TailwindCSS.\u0026#34;] [:a {:class \u0026#34;btn btn-primary\u0026#34; :href \u0026#34;#main\u0026#34;} \u0026#34;Get Started\u0026#34;]]]]) Riga 1, definisce il namespace (ns landing-page.components.hero). Riga 3, definisce la funzione main, senza argomenti. All interno della funzione main aggiungiamo il [:div ... ], in formato Hiccup per definire il layout del componente hero. TailiwndCSS è utilizzato all\u0026rsquo;interno di {:class \u0026quot;...\u0026quot;}, che equivale a class=\u0026quot;...\u0026quot; in HTML. Crea il componente terminale In src/main/landing_page/components/terminal.cljs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (ns landing-page.components.terminal) (defn main [] [:div {:class \u0026#34;flex justify-center p-8 py-16\u0026#34; :id \u0026#34;main\u0026#34;} [:div {:class \u0026#34;mockup-code\u0026#34;} [:pre {:data-prefix \u0026#34;$\u0026#34;} [:code \u0026#34;git clone https://git.dragoi/costin/responsive-landing-page-in-clojurescript\u0026#34;]] [:pre {:data-prefix \u0026#34;\u0026gt;\u0026#34;, :class \u0026#34;text-warning\u0026#34;} [:code \u0026#34;Cloning into \u0026#39;responsive-landing-page-in-clojurescript\u0026#39;...\u0026#34;]] [:pre {:data-prefix \u0026#34;$\u0026#34;} [:code \u0026#34;cd responsive-landing-page-in-clojurescript\u0026#34;]] [:pre {:data-prefix \u0026#34;$\u0026#34;} [:code \u0026#34;npm run release\u0026#34;]] [:pre {:data-prefix \u0026#34;\u0026gt;\u0026#34;, :class \u0026#34;text-warning\u0026#34;} [:code \u0026#34;[:app] Compiling...\u0026#34;]] [:pre {:data-prefix \u0026#34;\u0026gt;\u0026#34;, :class \u0026#34;text-success\u0026#34;} [:code \u0026#34;[:app] Build completed.\u0026#34;]]]]) Crea il componente footer In src/main/landing_page/components/footer.cljs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 (ns landing-page.components.footer) (defn main [] [:footer {:class \u0026#34;footer p-10 bg-neutral text-neutral-content\u0026#34;} [:div {:class \u0026#34;flex flex-col\u0026#34;} [:svg {:width \u0026#34;50\u0026#34;, :height \u0026#34;50\u0026#34;, :viewbox \u0026#34;0 0 24 24\u0026#34;, :xmlns \u0026#34;[Access denied](http://www.w3.org/2000/svg\u0026#34;,) :fill-rule \u0026#34;evenodd\u0026#34;, :clip-rule \u0026#34;evenodd\u0026#34;, :class \u0026#34;fill-current\u0026#34;} [:path {:d \u0026#34;M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\u0026#34;}]] [:p \u0026#34;Licensed under\u0026#34;] [:a {:href \u0026#34;[Creative Commons](https://creativecommons.org/licenses/by-sa/4.0\u0026#34;,) :target \u0026#34;_blank\u0026#34;, :class \u0026#34;flex items-center space-x-2\u0026#34;} [:span \u0026#34;CC-BY-SA 4.0\u0026#34;] [:div {:class \u0026#34;flex items-center space-x-2\u0026#34;} [:img {:class \u0026#34;h-4\u0026#34;, :src \u0026#34;[404 Not Found](https://mirrors.creativecommons.org/presskit/icons/cc.svg\u0026#34;}]) [:img {:class \u0026#34;h-4\u0026#34;, :src \u0026#34;[404 Not Found](https://mirrors.creativecommons.org/presskit/icons/by.svg\u0026#34;}]) [:img {:class \u0026#34;h-4\u0026#34;, :src \u0026#34;[404 Not Found](https://mirrors.creativecommons.org/presskit/icons/sa.svg\u0026#34;}]]]) [:br] [:p \u0026#34;Made with ♥️ in ClojureScript\u0026#34;]] [:div [:span {:class \u0026#34;footer-title\u0026#34;} \u0026#34;Social\u0026#34;] [:div {:class \u0026#34;grid grid-flow-col gap-4\u0026#34;} [:a {:href \u0026#34;https://twitter.com/stindrago\u0026#34; :target \u0026#34;_blank\u0026#34;} [:svg {:xmlns \u0026#34;[Access denied](http://www.w3.org/2000/svg\u0026#34;,) :width \u0026#34;24\u0026#34;, :height \u0026#34;24\u0026#34;, :viewbox \u0026#34;0 0 24 24\u0026#34;, :class \u0026#34;fill-current\u0026#34;} [:path {:d \u0026#34;M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\u0026#34;}]]] [:a {:href \u0026#34;[Error 403 (Forbidden)!!1](https://youtube.com/@stindrago\u0026#34;) :target \u0026#34;_blank\u0026#34;} [:svg {:xmlns \u0026#34;[Access denied](http://www.w3.org/2000/svg\u0026#34;,) :width \u0026#34;24\u0026#34;, :height \u0026#34;24\u0026#34;, :viewbox \u0026#34;0 0 24 24\u0026#34;, :class \u0026#34;fill-current\u0026#34;} [:path {:d \u0026#34;M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\u0026#34;}]]]]]]) Crea il componente notice In src/main/landing_page/components/notice.cljs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 (ns landing-page.components.notice (:require [reagent.core :as r])) (def state (r/atom {:hidden false})) (defn main [] [:div {:class (str \u0026#34;toast toast-center sm:toast-start z-10 \u0026#34; (when (:hidden @state) \u0026#34;hidden\u0026#34;))} [:div {:class \u0026#34;alert shadow-lg\u0026#34;} [:div [:svg {:xmlns \u0026#34;[Access denied](http://www.w3.org/2000/svg\u0026#34;,) :fill \u0026#34;none\u0026#34;, :viewBox \u0026#34;0 0 24 24\u0026#34;, :class \u0026#34;stroke-info flex-shrink-0 w-6 h-6\u0026#34;} [:path {:stroke-linecap \u0026#34;round\u0026#34;, :stroke-linejoin \u0026#34;round\u0026#34;, :stroke-width \u0026#34;2\u0026#34;, :d \u0026#34;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\u0026#34;}]] [:div [:h3 {:class \u0026#34;font-bold\u0026#34;} \u0026#34;We don\u0026#39;t use cookies for no reason!\u0026#34;] [:div {:class \u0026#34;text-xs\u0026#34;} \u0026#34;Press the button to dismiss.\u0026#34;]]] [:div {:class \u0026#34;flex-none\u0026#34;} [:button {:class \u0026#34;btn btn-sm sm:btn-circle btn-wide\u0026#34; :on-click #(swap! state assoc :hidden true)} [:svg {:xmlns \u0026#34;[Access denied](http://www.w3.org/2000/svg\u0026#34;,) :class \u0026#34;h-6 w-6\u0026#34;, :fill \u0026#34;none\u0026#34;, :viewBox \u0026#34;0 0 24 24\u0026#34;, :stroke \u0026#34;currentColor\u0026#34;} [:path {:stroke-linecap \u0026#34;round\u0026#34;, :stroke-linejoin \u0026#34;round\u0026#34;, :stroke-width \u0026#34;2\u0026#34;, :d \u0026#34;M6 18L18 6M6 6l12 12\u0026#34;}]]]]]]) Riga 2, (:require [reagent.core :as r]) serve per importare la libreria reagent.core. Riga 4, (def state (r/atom {:hidden false})) definisce un atomo di nome state. È una variabile che registra lo stato del componente per determinare se il componente è visibile o nascosto. Riga 8, {:class (str \u0026quot;toast toast-center sm:toast-start z-10 \u0026quot; (when (:hidden @state) \u0026quot;hidden\u0026quot;))}, aggiunge la classe hidden se lo stato della variabile state è {:hidden true}. Riga 28, :on-click #(swap! state assoc :hidden true), quando si preme il pulsante cambia lo stato di state in {:hidden true}. Chiama i componenti nel file principale In src/main/landing_page/app.cljs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (ns landing-page.app (:require [reagent.dom :as rd] [landing-page.components.footer :as footer] [landing-page.components.terminal :as terminal] [landing-page.components.hero :as hero] [landing-page.components.notice :as notice])) (defn app [] [:div {:data-theme \u0026#34;dracula\u0026#34;} [hero/main] [terminal/main] [footer/main] [notice/main]]) (defn start [] (rd/render [app] (.getElementById js/document \u0026#34;app\u0026#34;))) (defn main [] (start)) Importati tutti i componenti fino a ora definiti. Riga 8, in app vengono chiamate le funzioni main di tutti i componenti. Conclusioni Il sito web è finto. Crea una build per la versione distibuibile.\n1 npm run release Il sito si trova in target/dist. Può essere fatto il deploy su un qualsiasi web server.\n","date":"2023-02-24T00:00:00Z","image":"https://dragoi.me/it/p/come-creare-una-pagina-web-in-clojurescript/preview_huc739384dc25f99591ee065a564b18b59_78929_120x120_fill_box_smart1_3.png","permalink":"https://dragoi.me/it/p/come-creare-una-pagina-web-in-clojurescript/","title":"Come creare una pagina web in ClojureScript"}]